import{_ as i,D as n,c as o,l as e,a,I as s,a3 as l,o as r}from"./chunks/framework.BBWgT5cc.js";const P=JSON.parse('{"title":"AI","description":"","frontmatter":{},"headers":[],"relativePath":"features/ai/index.md","filePath":"features/ai/index.md","lastUpdated":1715476864000}'),d={name:"features/ai/index.md"},c=e("h1",{id:"ai",tabindex:"-1"},[a("AI "),e("a",{class:"header-anchor",href:"#ai","aria-label":'Permalink to "AI"'},"​")],-1),p=e("p",null,"AI features are used to enhance the capabilities of Raycast Unblock. These features are powered by AI models and APIs.",-1),h=e("p",null,"Raycast Unblock currently supports multiple AI models and APIs. You can see which AI models and APIs are supported by Raycast Unblock in the sidebar.",-1),u=e("h2",{id:"configuration",tabindex:"-1"},[a("Configuration "),e("a",{class:"header-anchor",href:"#configuration","aria-label":'Permalink to "Configuration"'},"​")],-1),m=e("p",null,"The configuration for AI features includes the following parameters:",-1),_=e("li",null,[e("code",null,"default"),a(": The default AI model or API to use.")],-1),k=e("code",null,"temperature",-1),f=e("code",null,"max_tokens",-1),I=l(`<div class="tip custom-block"><p class="custom-block-title">TIP</p><p>If the <code>temperature</code> and <code>max_tokens</code> parameters are not set in the specific AI service, this value will be used.</p><p>For example:</p><ul><li>If I don&#39;t set the temperature parameter in <code>AI.OpenAI</code>, this value will be used</li><li>But if I set the temperature parameter in <code>AI.Gemini</code>, the temperature parameter in <code>AI.Gemini</code> will be used</li></ul></div><p>Besides, the <code>temperature</code> and <code>max_tokens</code> parameters can be set in specific AI services to override the global configuration.</p><h3 id="example" tabindex="-1">Example <a class="header-anchor" href="#example" aria-label="Permalink to &quot;Example&quot;">​</a></h3><div class="language-toml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">toml</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">AI</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">default = </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;openai&#39;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># temperature = 0.5</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># max_tokens = 100</span></span></code></pre></div>`,4);function A(b,g,x,y,E,v){const t=n("Badge");return r(),o("div",null,[c,p,h,u,m,e("ul",null,[_,e("li",null,[k,a(": The temperature of the model. "),s(t,{type:"info",text:"Optional"})]),e("li",null,[f,a(": The maximum tokens of the model. "),s(t,{type:"info",text:"Optional"})])]),I])}const B=i(d,[["render",A]]);export{P as __pageData,B as default};
